// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model user {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  password             String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  name                 String?
  lastName             String?
  birthDate            DateTime?
  phone                String?
  address              address?               @relation(fields: [addressId], references: [id])
  externalLink         String[]
  addressId            Int?
  jobPost              jobPost?               @relation(fields: [jobPostId], references: [id])
  jobPostId            Int?
  jobApplication       jobApplication[]
  jobInterview         jobInterview[]
  jobOfferStatus       jobOfferStatus[]
  jobPostStatus        jobPostStatus[]
  jobApplicationStatus jobApplicationStatus[]
  jobInterviewStatus   jobInterviewStatus[]
}

model company {
  id                Int        @id @default(autoincrement())
  password          String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  companyNumber     String?
  juridicalCode     String?
  incorporationDate DateTime?
  status            String?
  type              String?
  address           address?   @relation(fields: [addressId], references: [id])
  recruiter         recruiter? @relation(fields: [recruiterId], references: [id])
  recruiterId       Int?
  addressId         Int?
  jobPost           jobPost[]
}

model recruiter {
  id        Int       @id @default(autoincrement())
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String?
  phone     String?
  address   address?  @relation(fields: [addressId], references: [id])
  myCompany company[]
  addressId Int?
  jobPost   jobPost[]
}

model address {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  country   String?
  city      String?
  street    String?
  number    String?
  zipCode   String?
  User      user[]
  Company   company[]
  recruiter recruiter[]
}

model jobOffer {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String?
  description String?
  jobPost     jobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId   Int?
}

model jobPost {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  title                String?
  description          String?
  jobOffer             jobOffer[]
  User                 user[]
  Company              company[]
  recruiter            recruiter[]
  jobApplication       jobApplication[]
  jobInterview         jobInterview[]
  jobOfferStatus       jobOfferStatus[]
  jobPostStatus        jobPostStatus[]
  jobApplicationStatus jobApplicationStatus[]
  jobInterviewStatus   jobInterviewStatus[]
}

model jobApplication {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?
  jobPost   jobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId Int?
  User      user?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model jobInterview {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?
  jobPost   jobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId Int?
  User      user?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model jobOfferStatus {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?
  jobPost   jobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId Int?
  User      user?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model jobPostStatus {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?
  jobPost   jobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId Int?
  User      user?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model jobApplicationStatus {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?
  jobPost   jobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId Int?
  User      user?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model jobInterviewStatus {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String?
  jobPost   jobPost? @relation(fields: [jobPostId], references: [id])
  jobPostId Int?
  User      user?    @relation(fields: [userId], references: [id])
  userId    Int?
}
